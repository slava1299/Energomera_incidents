// <auto-generated />
using System;
using EnergomeraIncidentsBot.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EnergomeraIncidentsBot.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240717062709_AddTelegramNotificationHistoryTable")]
    partial class AddTelegramNotificationHistoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.AppUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Рабочий email сотрудника.");

                    b.Property<string>("Fio")
                        .HasColumnType("text")
                        .HasColumnName("fio")
                        .HasComment("ФИО сотрудника.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Активен ли пользователь в боте?");

                    b.Property<bool>("IsRegistered")
                        .HasColumnType("boolean")
                        .HasColumnName("is_registered")
                        .HasComment("Пользователь зарегистрирован в боте?");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_chat_id")
                        .HasComment("Telegram идентификатор чата с пользователем.");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id")
                        .HasComment("Telegram идентификатор пользователя.");

                    b.Property<string>("TelegramUsername")
                        .HasColumnType("text")
                        .HasColumnName("telegram_username")
                        .HasComment("Telegram ник.");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_app_users");

                    b.ToTable("app_users", "app", t =>
                        {
                            t.HasComment("Таблица сотрудников в боте.");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.AppUserConfirmationCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code")
                        .HasComment("Код подтверждения.");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id")
                        .HasComment("Telegram ИД пользвоателя.");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_app_users_confirmation_codes");

                    b.ToTable("app_users_confirmation_codes", "app", t =>
                        {
                            t.HasComment("Таблица кодов подтверждения для пользователей.");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.EmailQueueItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Email адрес.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message")
                        .HasComment("Сообщение.");

                    b.Property<string>("Subject")
                        .HasColumnType("text")
                        .HasColumnName("subject")
                        .HasComment("Заголовок письма.");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_email_queue");

                    b.ToTable("email_queue", "app", t =>
                        {
                            t.HasComment("Элемент email рассылки.");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.Incident", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text")
                        .HasColumnName("area")
                        .HasComment("Участок");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author")
                        .HasComment("Автор");

                    b.Property<string>("ComissionLeader")
                        .HasColumnType("text")
                        .HasColumnName("comission_leader")
                        .HasComment("Лидер комиссии");

                    b.Property<int?>("ComplementaryCountForShift")
                        .HasColumnType("integer")
                        .HasColumnName("complementary_count_for_shift")
                        .HasComment("Количество Изделий За Смену");

                    b.Property<string>("ComplementaryProductCode")
                        .HasColumnType("text")
                        .HasColumnName("complementary_product_code")
                        .HasComment("Код комплектующего изделия");

                    b.Property<string>("ComplementaryProductName")
                        .HasColumnType("text")
                        .HasColumnName("complementary_product_name")
                        .HasComment("Наименование комплектующего изделия");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<decimal?>("DefectPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("defect_percent")
                        .HasComment("% дефектов");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Director")
                        .HasColumnType("text")
                        .HasColumnName("director")
                        .HasComment("ФИО руководителя");

                    b.Property<string>("DirectorEmail")
                        .HasColumnType("text")
                        .HasColumnName("director_email")
                        .HasComment("Почта руководителя");

                    b.Property<string>("Executor")
                        .HasColumnType("text")
                        .HasColumnName("executor")
                        .HasComment("Исполнитель");

                    b.Property<string>("ExecutorEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("executor_email")
                        .HasComment("Почта исполнителя");

                    b.Property<string>("ExecutorTelegramUsername")
                        .HasColumnType("text")
                        .HasColumnName("executor_telegram_username")
                        .HasComment("Аккаунт telegram");

                    b.Property<DateTime?>("IncidentDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("incident_date_time")
                        .HasComment("Дата появления инцидента");

                    b.Property<int?>("IncidentLevel")
                        .HasColumnType("integer")
                        .HasColumnName("incident_level")
                        .HasComment("Уровень инцидента");

                    b.Property<string>("IncidentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("incident_number")
                        .HasComment("Номер инцидента");

                    b.Property<int?>("NPCountForShift")
                        .HasColumnType("integer")
                        .HasColumnName("npcount_for_shift")
                        .HasComment("Количество НП За Смену");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("text")
                        .HasColumnName("problem_description")
                        .HasComment("Описание Несоответствия");

                    b.Property<string>("ProblemName")
                        .HasColumnType("text")
                        .HasColumnName("problem_name")
                        .HasComment("Наименование Дефекта");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text")
                        .HasColumnName("product_code")
                        .HasComment("Код изделия");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name")
                        .HasComment("Наименование изделия");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_incidents");

                    b.ToTable("incidents", "app", t =>
                        {
                            t.HasComment("Таблица инцидентов");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.IncidentFailNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text")
                        .HasColumnName("area")
                        .HasComment("Участок");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author")
                        .HasComment("Автор");

                    b.Property<string>("ComissionLeader")
                        .HasColumnType("text")
                        .HasColumnName("comission_leader")
                        .HasComment("Лидер комиссии");

                    b.Property<int?>("ComplementaryCountForShift")
                        .HasColumnType("integer")
                        .HasColumnName("complementary_count_for_shift")
                        .HasComment("Количество Изделий За Смену");

                    b.Property<string>("ComplementaryProductCode")
                        .HasColumnType("text")
                        .HasColumnName("complementary_product_code")
                        .HasComment("Код комплектующего изделия");

                    b.Property<string>("ComplementaryProductName")
                        .HasColumnType("text")
                        .HasColumnName("complementary_product_name")
                        .HasComment("Наименование комплектующего изделия");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<decimal?>("DefectPercent")
                        .HasColumnType("numeric")
                        .HasColumnName("defect_percent")
                        .HasComment("% дефектов");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Director")
                        .HasColumnType("text")
                        .HasColumnName("director")
                        .HasComment("ФИО руководителя");

                    b.Property<string>("DirectorEmail")
                        .HasColumnType("text")
                        .HasColumnName("director_email")
                        .HasComment("Емайл руководителя");

                    b.Property<string>("DirectorTelegramUsername")
                        .HasColumnType("text")
                        .HasColumnName("director_telegram_username")
                        .HasComment("Телеграм руководителя.");

                    b.Property<string>("Executor")
                        .HasColumnType("text")
                        .HasColumnName("executor")
                        .HasComment("ФИО сотрудника (исполнителя)");

                    b.Property<string>("ExecutorEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("executor_email")
                        .HasComment("Емайл сотрудника (исполнителя)");

                    b.Property<string>("ExecutorTelegramUsername")
                        .HasColumnType("text")
                        .HasColumnName("executor_telegram_username")
                        .HasComment("@telegram сотрудника");

                    b.Property<DateTime?>("IncidentDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("incident_date_time")
                        .HasComment("Дата появления инцидента");

                    b.Property<int?>("IncidentLevel")
                        .HasColumnType("integer")
                        .HasColumnName("incident_level")
                        .HasComment("Уровень инцидента");

                    b.Property<string>("IncidentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("incident_number")
                        .HasComment("Номер инцидента");

                    b.Property<int?>("NPCountForShift")
                        .HasColumnType("integer")
                        .HasColumnName("npcount_for_shift")
                        .HasComment("Количество НП За Смену");

                    b.Property<int?>("Norm")
                        .HasColumnType("integer")
                        .HasColumnName("norm")
                        .HasComment("norm");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("text")
                        .HasColumnName("problem_description")
                        .HasComment("Описание Несоответствия");

                    b.Property<string>("ProblemName")
                        .HasColumnType("text")
                        .HasColumnName("problem_name")
                        .HasComment("Наименование Дефекта");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text")
                        .HasColumnName("product_code")
                        .HasComment("Код изделия");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name")
                        .HasComment("Наименование изделия");

                    b.Property<string>("Status")
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasComment("Статус");

                    b.Property<int?>("Time")
                        .HasColumnType("integer")
                        .HasColumnName("time")
                        .HasComment("Время со старта инцидента");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_incident_fail_notifications");

                    b.ToTable("incident_fail_notifications", "app", t =>
                        {
                            t.HasComment("Уведомление о незавершении инцидента для пользователя. ");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.IncidentPreventNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Area")
                        .HasColumnType("text")
                        .HasColumnName("area")
                        .HasComment("Участок");

                    b.Property<string>("Author")
                        .HasColumnType("text")
                        .HasColumnName("author")
                        .HasComment("Автор");

                    b.Property<string>("AuthorEmail")
                        .HasColumnType("text")
                        .HasColumnName("author_email")
                        .HasComment("Автор_почта");

                    b.Property<string>("ComissionLeader")
                        .HasColumnType("text")
                        .HasColumnName("comission_leader")
                        .HasComment("Лидер");

                    b.Property<string>("ComissionLeaderEmail")
                        .HasColumnType("text")
                        .HasColumnName("comission_leader_email")
                        .HasComment("Лидер_почта");

                    b.Property<string>("ConsumerResponsiblePerson")
                        .HasColumnType("text")
                        .HasColumnName("consumer_responsible_person")
                        .HasComment("Ответственный_от_потребителя");

                    b.Property<string>("ConsumerResponsiblePersonEmail")
                        .HasColumnType("text")
                        .HasColumnName("consumer_responsible_person_email")
                        .HasComment("Ответственный_от_потребителя_почта");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<string>("Defect")
                        .HasColumnType("text")
                        .HasColumnName("defect")
                        .HasComment("Дефект");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("DeputyTechnologyDirector")
                        .HasColumnType("text")
                        .HasColumnName("deputy_technology_director")
                        .HasComment("Зам_начальник_по_технологии");

                    b.Property<string>("DeputyTechnologyDirectorEmail")
                        .HasColumnType("text")
                        .HasColumnName("deputy_technology_director_email")
                        .HasComment("Зам_начальник_по_технологии_почта");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description")
                        .HasComment("Описание");

                    b.Property<DateTime?>("IncidentDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("incident_date_time")
                        .HasComment("Дата");

                    b.Property<int?>("IncidentLevel")
                        .HasColumnType("integer")
                        .HasColumnName("incident_level")
                        .HasComment("Уровень");

                    b.Property<string>("IncidentNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("incident_number")
                        .HasComment("Номер");

                    b.Property<string>("Manufactory")
                        .HasColumnType("text")
                        .HasColumnName("manufactory")
                        .HasComment("Цех");

                    b.Property<int?>("Normative")
                        .HasColumnType("integer")
                        .HasColumnName("normative")
                        .HasComment("Норматив");

                    b.Property<string>("ProductCode")
                        .HasColumnType("text")
                        .HasColumnName("product_code")
                        .HasComment("Код_изделия");

                    b.Property<string>("ProductName")
                        .HasColumnType("text")
                        .HasColumnName("product_name")
                        .HasComment("Наименование_изделия");

                    b.Property<int?>("ResponseTime")
                        .HasColumnType("integer")
                        .HasColumnName("response_time")
                        .HasComment("Время_отклика");

                    b.Property<string>("SupplierResponsiblePerson")
                        .HasColumnType("text")
                        .HasColumnName("supplier_responsible_person")
                        .HasComment("ОтветственныйОтПоставщика");

                    b.Property<string>("SupplierResponsiblePersonEmail")
                        .HasColumnType("text")
                        .HasColumnName("supplier_responsible_person_email")
                        .HasComment("ОтветственныйОтПоставщика_Почта");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_incident_prevent_notifications");

                    b.ToTable("incident_prevent_notifications", "app", t =>
                        {
                            t.HasComment("Уведомление о купировании инцидента.");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.NotRegisteredUserNotification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Email пользователя.");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("ФИО пользователя.");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_not_registered_user_notifications");

                    b.ToTable("not_registered_user_notifications", "app", t =>
                        {
                            t.HasComment("Уведомление о незарегистрированном пользователе. ");
                        });
                });

            modelBuilder.Entity("EnergomeraIncidentsBot.Db.Entities.TelegramNotificationHistoryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("ИД.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("Когда создана сущность.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by")
                        .HasComment("Кем создана сущность.");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("Когда удалена сущность.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by")
                        .HasComment("Кем удалена сущность.");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message")
                        .HasComment("Сообщение уведомления.");

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_chat_id")
                        .HasComment("Телеграм чат ИД.");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("Когда обновлена сушность.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by")
                        .HasComment("Кем обновлена сущность.");

                    b.HasKey("Id")
                        .HasName("pk_telegram_notification_history");

                    b.ToTable("telegram_notification_history", "app", t =>
                        {
                            t.HasComment("История уведомлений в Telegram.");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
